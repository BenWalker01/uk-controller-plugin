diff --git a/include/ECFMP/eventbus/EventBus.h b/include/ECFMP/eventbus/EventBus.h
index 9107eff..315231c 100644
--- a/include/ECFMP/eventbus/EventBus.h
+++ b/include/ECFMP/eventbus/EventBus.h
@@ -40,7 +40,8 @@ namespace ECFMP::EventBus {
                     dispatcherFactory->CreateDispatcher<EventType>(listener, EventDispatchMode::Euroscope),
                     listener,
                     filter,
-                    {EventDispatchMode::Euroscope, false}});
+                    {EventDispatchMode::Euroscope, false}
+            });
         };
 
         /**
@@ -65,7 +66,8 @@ namespace ECFMP::EventBus {
                     dispatcherFactory->CreateDispatcher<EventType>(listener, EventDispatchMode::Euroscope),
                     listener,
                     filter,
-                    {EventDispatchMode::Euroscope, true}});
+                    {EventDispatchMode::Euroscope, true}
+            });
         };
 
         /**
@@ -89,7 +91,7 @@ namespace ECFMP::EventBus {
         // Factory for dispatchers
         std::shared_ptr<EventDispatcherFactory> dispatcherFactory;
 
-        private:
+        protected:
         template<typename EventType>
         auto GetStream() -> EventStream<EventType>&
         {
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index c5e1455..76348c7 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -92,6 +92,10 @@ target_compile_options(${PROJECT_NAME} PRIVATE
         ${DEFAULT_CXX_EXCEPTION_HANDLING}
-        -Wno-unused-parameter; # Lots of interfaces don't use everything
-        -Wno-missing-field-initializers; # Windows has loads of this sadly
+        $<$<CXX_COMPILER_ID:GNU,Clang>:-Wno-unused-parameter>; # Lots of interfaces don't use everything
+        $<$<CXX_COMPILER_ID:GNU,Clang>:-Wno-missing-field-initializers>; # Windows has loads of this sadly
+        # MSVC/clang-cl warning suppressions for common issues
+        $<$<CXX_COMPILER_ID:MSVC>:/wd4100>; # unreferenced formal parameter
+        $<$<CXX_COMPILER_ID:MSVC>:/wd4101>; # unreferenced local variable
+        $<$<COMPILE_LANG_AND_ID:CXX,Clang>:/Wno-unused-parameter>; # clang-cl unused parameters
 )
diff --git a/src/api/EventDataParser.cpp b/src/api/EventDataParser.cpp
index d7a7b43..6b2de24 100644
--- a/src/api/EventDataParser.cpp
+++ b/src/api/EventDataParser.cpp
@@ -39,21 +39,25 @@ namespace ECFMP::Api {
             // Parse participants
             std::vector<std::shared_ptr<Event::EventParticipant>> participants;
             for (const auto& participant: event.at("participants")) {
-                participants.push_back(std::make_shared<Event::ConcreteEventParticipant>(
-                        participant.at("cid").get<int>(),
-                        participant.at("origin").is_string() ? participant.at("origin").get<std::string>() : "",
-                        participant.at("destination").is_string() ? participant.at("destination").get<std::string>()
-                                                                  : ""
-                ));
+                participants.push_back(
+                        std::make_shared<Event::ConcreteEventParticipant>(
+                                participant.at("cid").get<int>(),
+                                participant.at("origin").is_string() ? participant.at("origin").get<std::string>() : "",
+                                participant.at("destination").is_string()
+                                        ? participant.at("destination").get<std::string>()
+                                        : ""
+                        )
+                );
             }
 
-            events->Add(std::make_shared<Event::ConcreteEvent>(
+            std::shared_ptr<Event::Event> eventPtr = std::make_shared<Event::ConcreteEvent>(
                     event.at("id").get<int>(), event.at("name").get<std::string>(),
                     Date::TimePointFromDateString(event.at("date_start").get<std::string>()),
                     Date::TimePointFromDateString(event.at("date_end").get<std::string>()),
                     firs.Get(event.at("flight_information_region_id").get<int>()),
                     event.at("vatcan_code").is_null() ? "" : event.at("vatcan_code").get<std::string>(), participants
-            ));
+            );
+            events->Add(eventPtr);
         }
 
         logger->Debug("Finished updating events");
diff --git a/src/event/ConcreteEvent.h b/src/event/ConcreteEvent.h
index f91a3e3..541ea78 100644
--- a/src/event/ConcreteEvent.h
+++ b/src/event/ConcreteEvent.h
@@ -6,7 +6,7 @@ namespace ECFMP::FlightInformationRegion {
 }// namespace ECFMP::FlightInformationRegion
 
 namespace ECFMP::Event {
-    class ConcreteEvent : public Event::Event
+    class ConcreteEvent : public Event
     {
         public:
         ConcreteEvent(